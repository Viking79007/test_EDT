#Область МетодыСервиса

Функция ordersPOST(Запрос)
	
	ДанныеОтвета = СформироватьДанныеОтвета();
	
	ПроверитьВерсиюAPIМагПэй(Запрос, ДанныеОтвета);
	
	ОбработатьЗапрос(Запрос, ДанныеОтвета);
	
	Ответ = Новый HTTPСервисОтвет(ДанныеОтвета["code"]);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Если ЗначениеЗаполнено(ДанныеОтвета["error"]) Тогда
		ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета["error"]);
	Иначе
		ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета["data"]);
	КонецЕсли;
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ.Заголовки.Вставить("Content-Type", "text/html;charset=utf-8");
	Возврат Ответ;
	
КонецФункции

Функция reportPOST(Запрос)
	
	ДанныеОтвета = СформироватьДанныеОтветаЗапросаОтчетаПоЗаказу();
	
	ПроверитьВерсиюAPIМагПэй(Запрос, ДанныеОтвета);
	
	ОбработатьЗапросОтчетаПоЗаказу(Запрос, ДанныеОтвета);
	
	Ответ = Новый HTTPСервисОтвет(ДанныеОтвета["code"]);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Если ЗначениеЗаполнено(ДанныеОтвета["error"]) Тогда
		ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета["error"]);
	Иначе
		ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета["data"]);
	КонецЕсли;
	
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ.Заголовки.Вставить("Content-Type", "text/html;charset=utf-8");
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти 

#Область МетодыordersPOST 

Процедура ОбработатьЗапрос(Запрос, ДанныеОтвета)
	
	Если ЗначениеЗаполнено(ДанныеОтвета.error) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные = ПрочитатьЗапрос(Запрос);
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные) Тогда
		ДанныеОтвета.error = ОписаниеОшибки();
		Возврат;
	КонецЕсли;
	
	ВерсияОбмена = Перечисления.ВерсииAPIМагПэй[Запрос.ПараметрыURL.Получить("version")];
	
	Если ВерсияОбмена = Перечисления.ВерсииAPIМагПэй.v2 Тогда
		ПрочитатьДанныеВторойВерсии(ПолученныеДанные, ДанныеОтвета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеВторойВерсии(ПолученныеДанные, ДанныеОтвета)
	
	ПроверитьВалидностьПолейВторойВерсии(ПолученныеДанные, ДанныеОтвета);
	
	Для Каждого Заказ Из ПолученныеДанные.Данные.data Цикл
		
		ИдентификаторВнешнейБазы = СтрШаблон("a%1",Заказ.external_id);
		НайденныйДокумент = Документы.ЗаказКлиентаМагПэй.НайтиПоРеквизиту("external_id", ИдентификаторВнешнейБазы);
		
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			Документ = НайденныйДокумент.ПолучитьОбъект();
			Документ.items.Очистить();
		Иначе
			Документ = Документы.ЗаказКлиентаМагПэй.СоздатьДокумент();
		КонецЕсли;
		
		Документ.Заполнить(Заказ);
		
		Если Не Документ.ПроверитьЗаполнение() Тогда
			
			ЗаписьЖурналаРегистрации("Создание заказа клиента маг пэй",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ЗаказКлиентаМагПэй,
				Документ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Продолжить;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			
			ДобавитьРезультатОбработкиЗаказа(ДанныеОтвета, Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации("Создание заказа клиента маг пэй",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ЗаказКлиентаМагПэй,
				Документ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВалидностьПолейВторойВерсии(ПолученныеДанные, ДанныеОтвета)
	
	КодОшибкиОбработки = ИнструментыВебСервисов.КодОшибкиОбработки();
	
	Если Не ПолученныеДанные.Свойство("Данные") Тогда 
		ДанныеОтвета.error = "Не переданны данные в Данные";
		ДанныеОтвета.code = КодОшибкиОбработки; 
		Возврат;
	КонецЕсли;
	
	Если Не ПолученныеДанные.Данные.Свойство("data") Тогда
		ДанныеОтвета.error = "Не переданны данные в data";
		ДанныеОтвета.code = КодОшибкиОбработки;
		Возврат;
	КонецЕсли;
	
	ОбязательныеПоляЗаказа = СтруктураВалидногоЗаказа();
	
	Для Каждого Заказ Из ПолученныеДанные.Данные.data Цикл
		
		Для Каждого Поле Из ОбязательныеПоляЗаказа Цикл
			
			ПроверитьПолеВДанных(Заказ, Поле, ДанныеОтвета);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеОтвета.error) Тогда 
		ДанныеОтвета.code = КодОшибкиОбработки; 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураВалидногоЗаказа()
	
	СтруктураЗаказа = Новый Структура;
	СтруктураЗаказа.Вставить("external_id");
	СтруктураЗаказа.Вставить("reference_number");
	СтруктураЗаказа.Вставить("delivery_address");
	СтруктураЗаказа.Вставить("payment_type");
	
	СтруктураТовара = Новый Структура;
	СтруктураТовара.Вставить("name");
	СтруктураТовара.Вставить("nomenclature_id");
	СтруктураТовара.Вставить("price");
	СтруктураТовара.Вставить("tax");
	СтруктураТовара.Вставить("quantity");
	
	СтруктураЗаказа.Вставить("items", СтруктураТовара);
	
	СтруктураКлиента = Новый Структура;
	СтруктураКлиента.Вставить("name");
	СтруктураКлиента.Вставить("phone1");
	СтруктураКлиента.Вставить("email1");
	СтруктураЗаказа.Вставить("client", СтруктураКлиента);
	
	Возврат СтруктураЗаказа;
	
КонецФункции

Процедура ПроверитьПолеВДанных(Заказ, Поле, ДанныеОтвета);
	
	Если Заказ.Свойство(Поле.Ключ) = Неопределено Тогда
		
		ДанныеОтвета.error = СтрШаблон("%1/n%2 %3",
			ДанныеОтвета.error, "В Структуре запроса нет поля ", Поле.Ключ);
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Поле.Значение) Тогда 
		
		Если ТипЗнч(Заказ[Поле.Ключ]) = Тип("Массив") Тогда 
			
			Для Каждого ПоляЗаказа Из Заказ[Поле.Ключ] Цикл 
				
				Для Каждого ВложенноеЗначение Из Поле.Значение Цикл
					
					ПроверитьПолеВДанных(ПоляЗаказа, ВложенноеЗначение, ДанныеОтвета);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Заказ[Поле.Ключ]) = Тип("Структура") Тогда 
		ПроверитьПолеВДанных(Заказ[Поле.Ключ], ВложенноеЗначение, ДанныеОтвета); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРезультатОбработкиЗаказа(ДанныеОтвета, Документ)
	
	РезультатДобавленияЗаказа = Новый Структура("id, qr, ref");
	РезультатДобавленияЗаказа.id = Документ.id;
	
	РезультатОперации = ГенерацияШтрихкода.ДанныеQRКода(Документ.id, 0, 100);
	РезультатДобавленияЗаказа.qr = СтрШаблон("data:image/png;base64,%1", Base64Строка(РезультатОперации));
	РезультатДобавленияЗаказа.ref = СтрШаблон("%1-%2", Лев(Документ.Номер, 4), Прав(Документ.Номер, 6));
	
	СтатусДобавленияЗаказа = Новый Структура("ok", РезультатДобавленияЗаказа);
	
	ИдентификаторВнешнейСистемы = Сред(Документ.external_id, 2);
	
	ДанныеОтвета.data.data.Вставить(ИдентификаторВнешнейСистемы, СтатусДобавленияЗаказа);
	
КонецПроцедуры

Функция СформироватьДанныеОтвета()
	
	КодУспешногоОтвета = ИнструментыВебСервисов.КодУспешногоОтвета(); 
	
	ДанныеОтвета = Новый Структура;
	ДанныеОтвета.Вставить("error", Неопределено);
	ДанныеОтвета.Вставить("code", КодУспешногоОтвета);
	ДанныеОтвета.Вставить("data", Новый Структура("data", Новый Структура()));
	
	Возврат ДанныеОтвета;
	
КонецФункции

#КонецОбласти

#Область МетодыreportPost

Процедура ОбработатьЗапросОтчетаПоЗаказу(Запрос, ДанныеОтвета)
	
	ПолученныеДанные = ПрочитатьЗапрос(Запрос);
	
	ВерсияОбмена = Перечисления.ВерсииAPIМагПэй[Запрос.ПараметрыURL.Получить("version")];
	
	Если ВерсияОбмена = Перечисления.ВерсииAPIМагПэй.v2 Тогда
		ПрочитатьЗапросОтчетаПоЗаказуВторойВерсии(ПолученныеДанные, ДанныеОтвета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗапросОтчетаПоЗаказуВторойВерсии(ПолученныеДанные, ДанныеОтвета)
	
	ПроверитьВалидностьПолейЗапросаОтчетаПоЗаказуВторойВерсии(ПолученныеДанные, ДанныеОтвета);
	
	Для Каждого Заказ Из ПолученныеДанные.Данные.data Цикл
		
		СостояниеЗаказаВторойВерсии(Заказ, ДанныеОтвета);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВалидностьПолейЗапросаОтчетаПоЗаказуВторойВерсии(ПолученныеДанные, ДанныеОтвета)
	
	КодОшибкиОбработки = ИнструментыВебСервисов.КодОшибкиОбработки();
	
	Если Не ПолученныеДанные.Свойство("Данные") Тогда 
		ДанныеОтвета.error = "Не переданны данные в Данные";
		ДанныеОтвета.code = КодОшибкиОбработки; 
		Возврат;
	КонецЕсли;
	
	Если Не ПолученныеДанные.Данные.Свойство("data") Тогда
		ДанныеОтвета.error = "Не переданны данные в data";
		ДанныеОтвета.code = КодОшибкиОбработки;
		Возврат;
	КонецЕсли;
	
	ОбязательныеПоляЗаказа = СтруктураВалидногоОтчетаПоЗаказуВторойВерсии();
	
	Для Каждого Заказ Из ПолученныеДанные.Данные.data Цикл
		
		Для Каждого Поле Из ОбязательныеПоляЗаказа Цикл
			
			ПроверитьПолеВДанных(Заказ, Поле, ДанныеОтвета);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеОтвета.error) Тогда 
		ДанныеОтвета.code = КодОшибкиОбработки;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураВалидногоОтчетаПоЗаказуВторойВерсии()
	
	СтруктураЗаказа = Новый Структура;
	СтруктураЗаказа.Вставить("external_id");
	
	Возврат СтруктураЗаказа;
	
КонецФункции

Процедура СостояниеЗаказаВторойВерсии(Заказ, ДанныеОтвета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("external_id", СтрШаблон("a%1", Заказ.external_id));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиентаМагПэй.Дата КАК Дата,
	|	ЗаказКлиентаМагПэй.id КАК id,
	|	ЗаказКлиентаМагПэй.external_id КАК external_id,
	|	ЗаказКлиентаМагПэй.reference_number КАК reference_number,
	|	ЗаказКлиентаМагПэй.state КАК state,
	|	ЗаказКлиентаМагПэй.type КАК type,
	|	ЗаказКлиентаМагПэй.payment_type КАК payment_type,
	|	ЗаказКлиентаМагПэй.items.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		nomenclature_id КАК nomenclature_id,
	|		name КАК name,
	|		tax КАК tax,
	|		quantity КАК quantity,
	|		price КАК price
	|	) КАК items
	|ИЗ
	|	Документ.ЗаказКлиентаМагПэй КАК ЗаказКлиентаМагПэй
	|ГДЕ
	|	ЗаказКлиентаМагПэй.external_id = &external_id";
	
	Результат = Запрос.Выполнить();
	// todo пока что не знаю что делать если заказ не найден
	//Если Результат.Пустой() Тогда
	//	
	//КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.state = Перечисления.СостоянияЗаказовМагПэй.PENDING Тогда
		РезультатНеОбработанногоЗаказа(Выборка, ДанныеОтвета);
	ИначеЕсли Выборка.state = Перечисления.СостоянияЗаказовМагПэй.SOLD Тогда
		РезультатОбработанногоЗаказа(Выборка, ДанныеОтвета);
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатНеОбработанногоЗаказа(Выборка, ДанныеОтвета)
	
	РезультатНеОбработанногоЗаказа = Новый Структура("id, external_id, reference_number, supplier, state, operations");
	ЗаполнитьЗначенияСвойств(РезультатНеОбработанногоЗаказа, Выборка);
	РезультатНеОбработанногоЗаказа.state = "PENDING";
	РезультатНеОбработанногоЗаказа.external_id = Сред(Выборка.external_id, 2);
	РезультатНеОбработанногоЗаказа.supplier = Новый Структура("name, inn", "ООО КДВ Групп", "7017094419");
	РезультатНеОбработанногоЗаказа.operations = Новый Массив();
	
	ДанныеОтвета.data.data.Добавить(РезультатНеОбработанногоЗаказа);
	
КонецПроцедуры

Процедура РезультатОбработанногоЗаказа(Выборка, ДанныеОтвета)
	
	Заказ = Новый Структура("id, external_id, reference_number, supplier, state, operations");
	ЗаполнитьЗначенияСвойств(Заказ, Выборка);
	Заказ.state = "SOLD";
	Заказ.external_id = Сред(Выборка.external_id, 2);
	Заказ.supplier = Новый Структура("name, inn", "ООО КДВ Групп", "7017094419");
	Заказ.operations = Новый Массив();
	
	ОперацииЗаказа(Заказ, Выборка);
	
	ДанныеОтвета.data.data.Добавить(Заказ);
	
КонецПроцедуры

Процедура ОперацииЗаказа(Заказ, Выборка)
	
	Товар = Выборка.items.Выбрать();
	
	СуммаЧека = 0;
	
	Пока Товар.Следующий() Цикл
		СуммаЧека = СуммаЧека + Товар.price * Товар.quantity;
	КонецЦикла;
	
	Операции = Новый Структура("payment, items, cheque");
	Операции.Вставить("type", XMLСтрока(Выборка.type));
	Операции.Вставить("payment", ОплатаЗаказа(Выборка, СуммаЧека));
	Операции.Вставить("items", ТоварыЗаказа(Выборка));
	Операции.Вставить("cheque", ИнформацияЧека(Выборка, СуммаЧека));
	Операции.Вставить("courier", Новый Структура("name, phone", "Полицинский Алексей Павлович", "+79237559636"));
	Операции.Вставить("aqent", Новый Структура("name, inn", "ООО КДВ Групп", "7017094419"));
	
	Заказ.operations.Добавить(Операции);
	
КонецПроцедуры

Функция СформироватьДанныеОтветаЗапросаОтчетаПоЗаказу()
	
	КодУспешногоОтвета = ИнструментыВебСервисов.КодУспешногоОтвета(); 
	
	ДанныеОтвета = Новый Структура;
	ДанныеОтвета.Вставить("error", Неопределено);
	ДанныеОтвета.Вставить("code", КодУспешногоОтвета);
	ДанныеОтвета.Вставить("data", Новый Структура("data", Новый Массив()));
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ОплатаЗаказа(Выборка, СуммаЧека)
	
	ОплатаЗаказа = Новый Структура();
	ОплатаЗаказа.Вставить("type", XMLСтрока(Выборка.payment_type));
	ОплатаЗаказа.Вставить("sum", СуммаЧека);
	ОплатаЗаказа.Вставить("rrn", "109010021495");
	ОплатаЗаказа.Вставить("terminal", "20910786");
	ОплатаЗаказа.Вставить("merchant", "571000009154");
	ОплатаЗаказа.Вставить("auth_code", "036378");
	
	Возврат ОплатаЗаказа;
	
КонецФункции

Функция ТоварыЗаказа(Выборка)
	
	ТоварыЗаказа = Новый Массив();
	
	ВыборкаТоваров = Выборка.items.Выбрать();
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		ТоварЗаказа = Новый Структура("nomenclature_id, price, quantity");
		ЗаполнитьЗначенияСвойств(ТоварЗаказа, ВыборкаТоваров);
		ТоварыЗаказа.Добавить(ТоварЗаказа);
		
	КонецЦикла;
	
	Возврат ТоварыЗаказа;
	
КонецФункции

Функция ИнформацияЧека(Выборка, СуммаЧека)
	
	ИнформацияЧека = Новый Структура();
	ИнформацияЧека.Вставить("uuid", "29d2236f-c975-4182-83ad-43dddaaf6dcc");
	ИнформацияЧека.Вставить("timestamp", Выборка.Дата);
	ИнформацияЧека.Вставить("group_code", "group_code_17683");
	ИнформацияЧека.Вставить("daemon_code", "prod-agent-36");
	ИнформацияЧека.Вставить("device_code", "KZN039510");
	
	ИнформацияФискальника = Новый Структура();
	ИнформацияФискальника.Вставить("fiscal_receipt_number", "1");
	ИнформацияФискальника.Вставить("fiscal_document_number", "1");
	ИнформацияФискальника.Вставить("fiscal_document_attribute", "1022808986");
	ИнформацияФискальника.Вставить("shift_number", "1");
	ИнформацияФискальника.Вставить("receipt_datetime", Выборка.Дата);
	ИнформацияФискальника.Вставить("total", СуммаЧека);
	ИнформацияФискальника.Вставить("fn_number", "9289440300638089");
	ИнформацияФискальника.Вставить("fns_site", "https://www.nalog.ru/rn77/");
	ИнформацияФискальника.Вставить("ecr_registration_number", "0004598224047060");
	ИнформацияФискальника.Вставить("ofd_inn", "6658497833");
	ИнформацияФискальника.Вставить("ofd_receipt_url", "");
	
	ИнформацияЧека.Вставить("payload", ИнформацияФискальника);
	
	Возврат ИнформацияЧека;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура ПроверитьВерсиюAPIМагПэй(Запрос, ДанныеОтвета)
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка(); 
	КодОшибкиОбработки = ИнструментыВебСервисов.КодОшибкиОбработки();
	
	ВерсияОбмена = Запрос.ПараметрыURL.Получить("version");
	
	Если Метаданные.Перечисления.ВерсииAPIМагПэй.ЗначенияПеречисления.Найти(ВерсияОбмена) = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Данная версия API %1 не поддерживается'", КодЯзыка), ВерсияОбмена);
		ДанныеОтвета.code = КодОшибкиОбработки;
		ДанныеОтвета.error = ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьЗапрос(Запрос)
	
	Тело = Запрос.ПолучитьТелоКакСтроку();
	
	ПолученныеДанные = ИнструментыВебСервисов.ПрочитатьСтрокуJSON(Тело);
	
	Возврат ПолученныеДанные;
	
КонецФункции

#КонецОбласти