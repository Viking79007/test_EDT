#Область СлужебныйПрограммныйИнтерфейс

#Область ВзаимодействиеСВнешнимиСистемами

Функция НастройкаПодключенияКБазеТестированияПоПодразделению(Подразделение) Экспорт
	
	ИменаРеквизитов = "Адрес,
	|Порт,
	|ИмяИнформационнойБазы,
	|Таймаут,
	|Логин,
	|Пароль";
	
	Настройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИменаРеквизитов);
	
	Возврат Настройки;
	
КонецФункции

Функция ИнициализироватьПараметрыПодключенияКБазеТестирования() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Порт", "");
	Параметры.Вставить("ИмяИнформационнойБазы", "");
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("Логин", "");
	Параметры.Вставить("Пароль", "");

	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ОтправкаДанных

Процедура ОтправитьЗаказВТестируемуюБазу(Заказ, ПараметрыОтправки) Экспорт
	
	Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Подразделение");
	
	ПараметрыПодключения = НастройкаПодключенияКБазеТестированияПоПодразделению(Подразделение);
	
	ПараметрыЗапроса = ИнструментыВебСервисов.ДанныеЗапроса("POST",
		"/" + ПараметрыПодключения.ИмяИнформационнойБазы + "/hs/OnlineStoreExchange/rpc/");
	ДанныеЗаказа = ДанныеСообщенияКОтправке(Заказ, ПараметрыОтправки);
	ПараметрыЗапроса.ТелоЗапроса = ИнструментыВебСервисов.ТекстJSON(ДанныеЗаказа);
	
	Хеш = ИнструментыВебСервисов.СтрокаBase64БезBOM(ПараметрыПодключения.Логин + ":" + ПараметрыПодключения.Пароль);
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", "Basic " + Хеш);
	
	ПараметрыЗапроса.Заголовки = Заголовки;
	
	РезультатЗапроса = ИнструментыВебСервисов.ОтправитьHTTPЗапрос(ПараметрыПодключения, ПараметрыЗапроса);
	
	ТекстСообщенияПользователю = НСтр("ru = 'Данные заказа успешно отправлены!'");
	РезультатЧтения = ИнструментыВебСервисов.ПрочитатьСтрокуJSON(РезультатЗапроса.ТекстОтвета);
	ДанныеОтвета = РезультатЧтения.Данные;
	Если РезультатЧтения.Ошибка Тогда
		
		ШаблонСообщения = НСтр("ru = 'Ошибка разбора ответа.
			|%1
			|
			|Текст ответа:
			|%2'");
		ТекстСообщенияПользователю = СтрШаблон(ШаблонСообщения,
												РезультатЧтения.ТекстОшибки,
												РезультатЗапроса.ТекстОтвета);
		
	ИначеЕсли РезультатЗапроса.КодСостояния <> 200
		ИЛИ (ТипЗнч(ДанныеОтвета) = Тип("Структура")
		И ДанныеОтвета.Свойство("error")
		И ТипЗнч(ДанныеОтвета.error) = Тип("Структура")) Тогда
		
		ШаблонСообщения = НСтр("ru = 'Ошибка отправки данных заказа.
			|%1'");
		ТекстСообщенияПользователю = СтрШаблон(ШаблонСообщения, ИнструментыВебСервисов.ТекстJSON(ДанныеОтвета.error));	
	
	ИначеЕсли ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
		
		ТекстСообщенияПользователю = "";
		Для Каждого ОтветНаЗапрос Из ДанныеОтвета Цикл

			ЕстьОшибки = (ТипЗнч(ОтветНаЗапрос) = Тип("Структура")
					И ОтветНаЗапрос.Свойство("error") 
					И ТипЗнч(ОтветНаЗапрос.error) = Тип("Структура"));
			
			Если Не ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;

			ШаблонСообщения = НСтр("ru = 'Ошибка отправки данных заказа.
								   |%1
								   |'");
			ТекстОтвета = СтрШаблон(ШаблонСообщения, ИнструментыВебСервисов.ТекстJSON(ОтветНаЗапрос.error));
			
			ТекстСообщенияПользователю = ТекстСообщенияПользователю + ТекстОтвета;
			
		КонецЦикла;

	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю);

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

Функция РезультатОбработкиДанныхВходящегоСообщения(ВходящееСообщение) Экспорт

	РезультатЧтенияВходящегоСообщения = ИнструментыВебСервисов.ПрочитатьСтрокуJSON(ВходящееСообщение);

	Если Не РезультатЧтенияВходящегоСообщения.Ошибка Тогда

		ДанныеСообщения = РезультатЧтенияВходящегоСообщения.Данные;

		Если СообщениеСоответствуетСтандартуJSONRPC2(ДанныеСообщения) Тогда

			Ответ = РезультатОбработкиСообщенияJSONRPC2(ВходящееСообщение, ДанныеСообщения);

		Иначе
			Ответ = ОтветНекорректныйЗапрос();
		КонецЕсли;

	Иначе
		Ответ = ОтветОшибкаРазбораСообщения(РезультатЧтенияВходящегоСообщения.ТекстОшибки);
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтправкаДанных

Функция ДанныеСообщенияКОтправке(Заказ, ПараметрыОтправки)
	
	ДанныеСообщения = Новый Структура;
	Если ПараметрыОтправки.ОтправлятьЗаказ
		И ПараметрыОтправки.ОтправлятьОплату Тогда
		
		ДанныеСообщения = Новый Массив;
		ДанныеСообщения.Добавить(ДанныеДляСозданияЗаказа(Заказ));
		ДанныеСообщения.Добавить(ДанныеДляСозданияОплаты(Заказ));
			
	ИначеЕсли ПараметрыОтправки.ОтправлятьЗаказ Тогда
		
		ДанныеСообщения = ДанныеДляСозданияЗаказа(Заказ);
			
	ИначеЕсли ПараметрыОтправки.ОтправлятьОплату Тогда
		
		ДанныеСообщения = ДанныеДляСозданияОплаты(Заказ);
			
	ИначеЕсли ПараметрыОтправки.ОтправлятьВозвратОплаты Тогда
		
		ДанныеСообщения = ДанныеДляВозвратаОплаты(Заказ);
		
	КонецЕсли;
	
	Возврат ДанныеСообщения;

КонецФункции

Функция ДанныеДляСозданияЗаказа(Заказ)
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("jsonrpc", "2.0");
	ДанныеСообщения.Вставить("method", "order.create");
	ИдентификаторСообщения = Новый УникальныйИдентификатор();
	ДанныеСообщения.Вставить("id", Строка(ИдентификаторСообщения));
	
	ДанныеЗаказа = Новый Структура;
	
	ИменаРеквизитов = КДВ_ОбщегоНазначения.ИменаРеквизитовОбъекта(Заказ);
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, ИменаРеквизитов);
	
	ЧасовойПояс = РеквизитыЗаказа.ЧасовойПояс;
	ДанныеЗаказа.Вставить("guid", РеквизитыЗаказа.guid);
	ДанныеЗаказа.Вставить("number", РеквизитыЗаказа.НомерЗаказа);
	ДанныеЗаказа.Вставить("date", ИнтеграцияИС.ДатаСЧасовымПоясом(РеквизитыЗаказа.ДатаЗаказа, ЧасовойПояс));
	ДанныеЗаказа.Вставить("total", РеквизитыЗаказа.Сумма);
	ДанныеЗаказа.Вставить("comment", РеквизитыЗаказа.Комментарий);
	ДанныеЗаказа.Вставить("source", РеквизитыЗаказа.Источник);
	ДанныеЗаказа.Вставить("warehouse", РеквизитыЗаказа.Склад.guid);
	ДанныеЗаказа.Вставить("agreement", РеквизитыЗаказа.Договор.guid);
	ДанныеЗаказа.Вставить("contractor", РеквизитыЗаказа.Контрагент.guid);
	ДанныеЗаказа.Вставить("store", РеквизитыЗаказа.ТорговаяТочка.guid);
	
	ДополнительныеДанные = Новый Структура;
	Если РеквизитыЗаказа.НеобходимаПечатьСертификатов Тогда
		ДополнительныеДанные.Вставить("requires_sertificate", РеквизитыЗаказа.НеобходимаПечатьСертификатов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыЗаказа.Скидка) Тогда
		ДанныеСкидки = Новый Структура;
		ДанныеСкидки.Вставить("guid", РеквизитыЗаказа.Скидка.guid);
		ДанныеСкидки.Вставить("value", РеквизитыЗаказа.Скидка.ЗначениеСкидки);
		ДополнительныеДанные.Вставить("discount", ДанныеСкидки);
	КонецЕсли;
	
	ДанныеЗаказа.Вставить("meta", ДополнительныеДанные);
	
	ДанныеПокупателя = Новый Структура;
	ДанныеПокупателя.Вставить("name", РеквизитыЗаказа.ИмяПокупателя);
	ДанныеПокупателя.Вставить("phone", РеквизитыЗаказа.ТелефонПокупателя);
	ДанныеПокупателя.Вставить("email", РеквизитыЗаказа.ЭлектроннаяПочтаПокупателя);
	
	ДанныеЗаказа.Вставить("customer", ДанныеПокупателя);
	
	ДанныеДоставки = Новый Структура;
	ДанныеДоставки.Вставить("method", РеквизитыЗаказа.СпособДоставки);
	ДанныеДоставки.Вставить("address", РеквизитыЗаказа.АдресДоставки);
	ПериодДоставки = Новый Структура;
	ПериодДоставки.Вставить("from", ИнтеграцияИС.ДатаСЧасовымПоясом(РеквизитыЗаказа.ДатаНачалаДоставки, ЧасовойПояс));
	ПериодДоставки.Вставить("to", ИнтеграцияИС.ДатаСЧасовымПоясом(РеквизитыЗаказа.ДатаОкончанияДоставки, ЧасовойПояс));
	ДанныеДоставки.Вставить("date", ПериодДоставки);
	КоординатыДоставки = Новый Структура;
	КоординатыДоставки.Вставить("lat", РеквизитыЗаказа.КоординатыДоставкиШирота);
	КоординатыДоставки.Вставить("lon", РеквизитыЗаказа.КоординатыДоставкиДолгота);
	ДанныеДоставки.Вставить("geo", КоординатыДоставки);
	ДанныеДоставки.Вставить("zone", РеквизитыЗаказа.ЗонаДоставки.guid);
	
	ДанныеЗаказа.Вставить("delivery", ДанныеДоставки);
	
	ДанныеОплаты = Новый Структура;
	ДанныеОплаты.Вставить("method", РеквизитыЗаказа.СпособОплаты);
	
	ДанныеЗаказа.Вставить("payment", ДанныеОплаты);
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "
	|ВЫБРАТЬ
	|	ЗаказКлиентаИМТовары.Номенклатура,
	|	ЗаказКлиентаИМТовары.Цена,
	|	ЗаказКлиентаИМТовары.Количество,
	|	ЗаказКлиентаИМТовары.КоличествоБазовыхЕдиниц,
	|	ЗаказКлиентаИМТовары.Сумма
	|ИЗ
	|	Документ.ЗаказКлиентаИМ.Товары КАК ЗаказКлиентаИМТовары
	|ГДЕ
	|	ЗаказКлиентаИМТовары.Ссылка = &Заказ";
	ЗапросТовары.УстановитьПараметр("Заказ", Заказ);
	
	Товары = ЗапросТовары.Выполнить().Выбрать();
	ДанныеТоваров = Новый Массив;
	Пока Товары.Следующий() Цикл
		
		ДанныеТовара = Новый Структура;
		ДанныеТовара.Вставить("product", Товары.Номенклатура.guid);
		ДанныеТовара.Вставить("price", Товары.Цена);
		ДанныеТовара.Вставить("amount", Товары.КоличествоБазовыхЕдиниц);
		ДанныеТовара.Вставить("quantity", Товары.Количество);
		ДанныеТовара.Вставить("total", Товары.Сумма);
		
		ДанныеТоваров.Добавить(ДанныеТовара);
		
	КонецЦикла;
	
	ДанныеЗаказа.Вставить("items", ДанныеТоваров);
	
	ДанныеСообщения.Вставить("params", ДанныеЗаказа);
		
	Возврат ДанныеСообщения;
	
КонецФункции

Функция ДанныеДляСозданияОплаты(Заказ)
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("jsonrpc", "2.0");
	ДанныеСообщения.Вставить("method", "order.payment");
	ИдентификаторСообщения = Новый УникальныйИдентификатор();
	ДанныеСообщения.Вставить("id", Строка(ИдентификаторСообщения));
	
	ДанныеОплаты = Новый Структура;
	
	ИменаРеквизитов = "guid,
						|СуммаОплаты,
						|ДатаОплаты,
						|ИдентификаторТерминала,
						|ЧасовойПояс";
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, ИменаРеквизитов);
	
	ЧасовойПояс = РеквизитыЗаказа.ЧасовойПояс;
	ДанныеОплаты.Вставить("order", РеквизитыЗаказа.guid);
	ДанныеОплаты.Вставить("status", "confirmed");
	ДанныеОплаты.Вставить("value", РеквизитыЗаказа.СуммаОплаты);
	ДанныеОплаты.Вставить("date", ИнтеграцияИС.ДатаСЧасовымПоясом(РеквизитыЗаказа.ДатаОплаты, ЧасовойПояс));
	ДанныеОплаты.Вставить("terminal", РеквизитыЗаказа.ИдентификаторТерминала);
	
	ДанныеСообщения.Вставить("params", ДанныеОплаты);
	
	Возврат ДанныеСообщения;
	
КонецФункции

Функция ДанныеДляВозвратаОплаты(Заказ)
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("jsonrpc", "2.0");
	ДанныеСообщения.Вставить("method", "order.payment");
	ИдентификаторСообщения = Новый УникальныйИдентификатор();
	ДанныеСообщения.Вставить("id", Строка(ИдентификаторСообщения));
	
	ДанныеВозврата = Новый Структура;
	
	ИменаРеквизитов = "guid,
						|СуммаВозвратаОплаты,
						|ДатаВозвратаОплаты,
						|ИдентификаторТерминала,
						|ЧасовойПояс";
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, ИменаРеквизитов);
	
	ЧасовойПояс = РеквизитыЗаказа.ЧасовойПояс;
	ДанныеВозврата.Вставить("order", РеквизитыЗаказа.guid);
	ДанныеВозврата.Вставить("status", "refunded");
	ДанныеВозврата.Вставить("value", РеквизитыЗаказа.СуммаВозвратаОплаты);
	ДанныеВозврата.Вставить("date", ИнтеграцияИС.ДатаСЧасовымПоясом(РеквизитыЗаказа.ДатаВозвратаОплаты, ЧасовойПояс));
	ДанныеВозврата.Вставить("terminal", РеквизитыЗаказа.ИдентификаторТерминала);
	
	ДанныеСообщения.Вставить("params", ДанныеВозврата);
	
	Возврат ДанныеСообщения;
	
КонецФункции
	
#КонецОбласти

#Область ПолучениеДанных

Функция РезультатОбработкиСообщенияJSONRPC2(ВходящееСообщение, ДанныеСообщения)

	НесколькоЗапросов = ТипЗнч(ДанныеСообщения) = Тип("Массив");
	РезультатыОбработки = Новый Массив;
	Если НесколькоЗапросов Тогда
		
		Для Каждого ОтдельныйЗапрос Из ДанныеСообщения Цикл
			
			РезультатОбработки = ОбработатьЗапрос(ВходящееСообщение,
													ОтдельныйЗапрос);
			РезультатыОбработки.Добавить(РезультатОбработки);
			
		КонецЦикла;
		
	Иначе
		
		РезультатОбработки = ОбработатьЗапрос(ВходящееСообщение,
												ДанныеСообщения);
		РезультатыОбработки.Добавить(РезультатОбработки);
		
	КонецЕсли;
		
	Ответ = ОтветПоРезультатуОбработкиСообщения(РезультатыОбработки, НесколькоЗапросов);

	Возврат Ответ;

КонецФункции

Функция ОбработатьЗапрос(ВходящееСообщение, ДанныеЗапроса)

	Если Не ЗапросСоответствуетСтандартуJSONRPC2(ДанныеЗапроса) Тогда
		РезультатОбработки = ИнициализироватьРезультатОбработкиЗапроса();
		РезультатОбработки.ТекстОшибки = "Запрос не соответствует формату JSON RPC2";
		РезультатОбработки.ТипОшибки = Перечисления.ТипыОшибокОбменаСИнтернетМагазином.НекорректныйЗапрос;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ПодготовитьТелоЗапросаКОбработке(ДанныеЗапроса);
	
	РезультатОбработки = ОбработатьТелоЗапроса(ДанныеЗапроса);
	
	Возврат РезультатОбработки;

КонецФункции

Функция ОбработатьТелоЗапроса(ДанныеЗапроса)
	
	РезультатОбработкиЗапроса = ИнициализироватьРезультатОбработкиЗапроса();
	
	Попытка
		
		Если ДанныеЗапроса.method = "order.status" Тогда
			РезультатОбработкиЗапроса = ОбработатьЗапросНаИзменениеСтатусаЗаказа(ДанныеЗапроса);
		ИначеЕсли ДанныеЗапроса.method = "order.update" Тогда
			РезультатОбработкиЗапроса = ОбработатьЗапросНаИзменениеСоставаЗаказа(ДанныеЗапроса);
		ИначеЕсли ДанныеЗапроса.method = "stock" Тогда
			РезультатОбработкиЗапроса = ОбработатьЗапросСДаннымиОстатковПродукции(ДанныеЗапроса);
		Иначе
			РезультатОбработкиЗапроса = РезультатОбработкиЗапросаМетодНеПоддерживается();
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатОбработкиЗапроса = РезультатОбработкиЗапросаОшибкаОбработки(ТекстОшибки);
		
	КонецПопытки;
	
	РезультатОбработкиЗапроса.ИдентификаторЗапроса = ДанныеЗапроса.id;
	Возврат РезультатОбработкиЗапроса;
	
КонецФункции

Функция ОбработатьЗапросНаИзменениеСтатусаЗаказа(ДанныеЗапроса)

	РезультатОбработки = ИнициализироватьРезультатОбработкиЗапроса();
	
	ПараметрыОбновленияСтатуса = ДанныеЗапроса.params;
	РезультатПроверкиЗаполнения = ПроверкаЗаполненияМетодаОбновленияСтатусаЗаказа(ПараметрыОбновленияСтатуса);
	
	Если РезультатПроверкиЗаполнения.Ошибка Тогда
		РезультатОбработки.ТекстОшибки = РезультатПроверкиЗаполнения.ТекстОшибки;
		РезультатОбработки.ТипОшибки = Перечисления.ТипыОшибокОбменаСИнтернетМагазином.НекорректныеАргументы;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаказКлиентаСсылка = Документы.ЗаказКлиентаИМ.НайтиПоРеквизиту("guid", ПараметрыОбновленияСтатуса.order);
	
	Если ЗаказКлиентаСсылка = ""
		ИЛИ Не ОбщегоНазначения.СсылкаСуществует(ЗаказКлиентаСсылка) Тогда
		РезультатОбработки.ТекстОшибки = НСтр("ru='Заказ с переданным guid не найден.'");
		РезультатОбработки.ТипОшибки = Перечисления.ТипыОшибокОбменаСИнтернетМагазином.НекорректныеАргументы;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	РезультатСоздания = ОбновитьСтатусЗаказаПоВходящимДанным(ЗаказКлиентаСсылка, ПараметрыОбновленияСтатуса);
	
	РезультатОбработки.ДанныеОтвета = РезультатСоздания;
	Возврат РезультатОбработки;

КонецФункции

Функция ОбновитьСтатусЗаказаПоВходящимДанным(ЗаказКлиентаСсылка, ПараметрыОбновленияСтатуса)

	СтатусыПоПредставлениям = СтатусыЗаказовИМПоСтроковымПредставлениям();
	Статус = Перечисления.СтатусыЗаказовИМ.ПустаяСсылка();
	СтатусыПоПредставлениям.Свойство(ПараметрыОбновленияСтатуса.status, Статус);

	Если Не ЗначениеЗаполнено(Статус) Тогда

		ВызватьИсключение "Получен неизвестный статус заказа";

	КонецЕсли;

	МенеджерОшибок = Новый МенеджерОбработкиОшибок;
	Попытка

		Документы.ЗаказКлиентаИМ.УстановитьСтатусЗаказаИМ(ЗаказКлиентаСсылка, Статус);
		
		Возврат Истина;

	Исключение

		ВызватьИсключение МенеджерОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

	КонецПопытки;

КонецФункции

Функция СтатусыЗаказовИМПоСтроковымПредставлениям()
	
	МенеджерСтатусов = Перечисления.СтатусыЗаказовИМ;
	
	Статусы = Новый Структура;
	Статусы.Вставить("new", МенеджерСтатусов.Новый);
	Статусы.Вставить("in_processing", МенеджерСтатусов.Обрабатывается);
	Статусы.Вставить("reserved", МенеджерСтатусов.Зарезервирован);
	Статусы.Вставить("is_assembling", МенеджерСтатусов.Комплектуется);
	Статусы.Вставить("awaiting_delivery", МенеджерСтатусов.ОжидаетДоставки);
	Статусы.Вставить("delivery", МенеджерСтатусов.Доставка);
	Статусы.Вставить("delivered", МенеджерСтатусов.Доставлен);
	Статусы.Вставить("cancelled", МенеджерСтатусов.Отменен);
	Статусы.Вставить("completed", МенеджерСтатусов.Завершен);
	
	Возврат Статусы;
	
КонецФункции

Функция ОбработатьЗапросНаИзменениеСоставаЗаказа(ДанныеЗапроса)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиЗапроса();
	
	ПараметрыИзмененияДанных = ДанныеЗапроса.params;
	РезультатПроверкиЗаполнения = ПроверкаЗаполненияМетодаОбновленияДанныхЗаказа(ПараметрыИзмененияДанных);
	
	Если РезультатПроверкиЗаполнения.Ошибка Тогда
		РезультатОбработки.ТекстОшибки = РезультатПроверкиЗаполнения.ТекстОшибки;
		РезультатОбработки.ТипОшибки = Перечисления.ТипыОшибокОбменаСИнтернетМагазином.НекорректныеАргументы;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаказКлиентаСсылка = Документы.ЗаказКлиентаИМ.НайтиПоРеквизиту("guid", ПараметрыИзмененияДанных.order);
	
	Если ЗаказКлиентаСсылка = ""
		ИЛИ Не ОбщегоНазначения.СсылкаСуществует(ЗаказКлиентаСсылка) Тогда
		РезультатОбработки.ТекстОшибки = НСтр("ru='Заказ с переданным guid не найден.'");
		РезультатОбработки.ТипОшибки = Перечисления.ТипыОшибокОбменаСИнтернетМагазином.НекорректныеАргументы;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	РезультатСоздания = ОбновитьДанныеЗаказаПоВходящимДанным(ЗаказКлиентаСсылка, ПараметрыИзмененияДанных);
	
	РезультатОбработки.ДанныеОтвета = РезультатСоздания;
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбновитьДанныеЗаказаПоВходящимДанным(ЗаказКлиентаСсылка, ПараметрыИзмененияДанных)

	ЗаказОбъект = ЗаказКлиентаСсылка.ПолучитьОбъект();
	ЗаказОбъект.Заполнить(ПараметрыИзмененияДанных);
	
	МенеджерОшибок = Новый МенеджерОбработкиОшибок;
	Попытка

		ЗаказОбъект.Записать();
		
		Возврат Истина;

	Исключение

		ВызватьИсключение МенеджерОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

	КонецПопытки;

КонецФункции

Функция ОбработатьЗапросСДаннымиОстатковПродукции(ДанныеЗапроса)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиЗапроса();
	
	ПараметрыИзмененияДанных = ДанныеЗапроса.params;
	РезультатПроверкиЗаполнения = ПроверкаЗаполненияМетодаВыгрузкиОстатков(ПараметрыИзмененияДанных);
	
	Если РезультатПроверкиЗаполнения.Ошибка Тогда
		РезультатОбработки.ТекстОшибки = РезультатПроверкиЗаполнения.ТекстОшибки;
		РезультатОбработки.ТипОшибки = Перечисления.ТипыОшибокОбменаСИнтернетМагазином.НекорректныеАргументы;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ПодготовитьТелоЗапросаКОбработке(ТелоЗапроса)
	
	Если Не ТелоЗапроса.Свойство("id") Тогда
		ТелоЗапроса.Вставить("id", Строка(Новый УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьРезультатОбработкиЗапроса()
	
	РезультатОбработки = Новый Структура("ИдентификаторЗапроса,
										|ДанныеОтвета,
										|ТипОшибки,
										|ТекстОшибки",
										Неопределено,
										Неопределено,
										Перечисления.ТипыОшибокОбменаСИнтернетМагазином.ПустаяСсылка(),
										"");
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеОтветы

Функция ОтветНекорректныйЗапрос()
	
	ТелоОтвета = ТелоОтветаОшибкаПоДаннымОтвета(Ошибка_НекорректныйЗапрос());
	Возврат ОтветПоТелуОтвета(ТелоОтвета);
	
КонецФункции

Функция ОтветОшибкаРазбораСообщения(ТекстОшибки)
	
	ТелоОтвета = ТелоОтветаОшибкаПоДаннымОтвета(Ошибка_РазборСообщения(), ТекстОшибки);
	Возврат ОтветПоТелуОтвета(ТелоОтвета);
	
КонецФункции

Функция ОтветПоТелуОтвета(ТелоОтвета)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(ИнструментыВебСервисов.ТекстJSON(ТелоОтвета));
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтвета

Функция ТелоОтветаРодитель()
	
	Ответ = Новый Структура;
	
	Ответ.Вставить("jsonrpc", "2.0");
	Ответ.Вставить("id");
	
	Возврат Ответ;
	
КонецФункции

Функция ТелоОшибки()
	
	Ошибка = Новый Структура;
	
	Ошибка.Вставить("code", "");
	Ошибка.Вставить("message", "");
	Ошибка.Вставить("data");
	
	Возврат Ошибка;
	
КонецФункции

Функция ТелоОтветаОшибка()
	
	Ответ = ТелоОтветаРодитель();
	
	Ответ.Вставить("error", ТелоОшибки());
	
	Возврат Ответ;
	
КонецФункции

Функция ТелоОтветаОшибкаПоДаннымОтвета(ТипОшибки, ТекстОшибки = "", ИдентификаторСообщения = Неопределено)
	
	ТелоОтвета = ТелоОтветаОшибка();
	
	Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		ТелоОтвета.id = ИдентификаторСообщения;
	КонецЕсли;
	
	ТелоОтвета.error.message = ТипОшибки;
	ТелоОтвета.error.code = КодыОшибок().Получить(ТипОшибки);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ТелоОтвета.error.data = ТекстОшибки;
	КонецЕсли;
	
	Возврат ТелоОтвета;
	
КонецФункции

Функция ТелоОтветаУспех()
	
	Ответ = ТелоОтветаРодитель();
	
	Ответ.Вставить("result", Истина);
	
	Возврат Ответ;
	
КонецФункции

Функция ТелоОтветаУспехПоДаннымОтвета(ИдентификаторСообщения, ДанныеОтвета)
	
	ТелоОтвета = ТелоОтветаУспех();
	ТелоОтвета.id = ИдентификаторСообщения;
	ТелоОтвета.result = ДанныеОтвета;
	
	Возврат ТелоОтвета;

КонецФункции

Функция ТелоОтветаМетодНеПоддерживается(ИдентификаторСообщения)
	
	Возврат ТелоОтветаОшибкаПоДаннымОтвета(Ошибка_МетодНеПоддерживается(),
											,
											ИдентификаторСообщения);
	
КонецФункции

Функция ТелоОтветаОшибкаОбработкиЗапроса(ИдентификаторСообщения, ТекстОшибки)
	
	Возврат ТелоОтветаОшибкаПоДаннымОтвета(Ошибка_ОшибкаОбработки(),
											ТекстОшибки,
											ИдентификаторСообщения);
	
КонецФункции

Функция ТелоОтветаНекорректныеАргументы(ИдентификаторСообщения, ТекстОшибки)
	
	Возврат ТелоОтветаОшибкаПоДаннымОтвета(Ошибка_НекорректныеАргументы(),
											ТекстОшибки,
											ИдентификаторСообщения);
	
КонецФункции

Функция ТелоОтветаНекорректныйЗапрос(ИдентификаторСообщения, ТекстОшибки)
	
	Возврат ТелоОтветаОшибкаПоДаннымОтвета(Ошибка_НекорректныйЗапрос(),
											ТекстОшибки,
											ИдентификаторСообщения);
	
КонецФункции

Функция ТелоОтветаПоРезультатуОбработкиЗапроса(РезультатОбработки)

	ТелоОтвета = ТелоОтветаУспехПоДаннымОтвета(РезультатОбработки.ИдентификаторЗапроса,
													РезультатОбработки.ДанныеОтвета);
		
	Если РезультатОбработки.ТипОшибки =
		Перечисления.ТипыОшибокОбменаСИнтернетМагазином.НекорректныеАргументы Тогда
		
		ТелоОтвета = ТелоОтветаНекорректныеАргументы(РезультатОбработки.ИдентификаторЗапроса,
														РезультатОбработки.ТекстОшибки);
		
	ИначеЕсли РезультатОбработки.ТипОшибки =
		Перечисления.ТипыОшибокОбменаСИнтернетМагазином.МетодНеПоддерживается Тогда
		
		ТелоОтвета = ТелоОтветаМетодНеПоддерживается(РезультатОбработки.ИдентификаторЗапроса);
		
	ИначеЕсли РезультатОбработки.ТипОшибки =
		Перечисления.ТипыОшибокОбменаСИнтернетМагазином.ОшибкаОбработкиЗапроса Тогда
		
		ТелоОтвета = ТелоОтветаОшибкаОбработкиЗапроса(РезультатОбработки.ИдентификаторЗапроса,
														РезультатОбработки.ТекстОшибки);
		
	ИначеЕсли РезультатОбработки.ТипОшибки =
		Перечисления.ТипыОшибокОбменаСИнтернетМагазином.НекорректныйЗапрос Тогда
		
		ТелоОтвета = ТелоОтветаНекорректныйЗапрос(РезультатОбработки.ИдентификаторЗапроса,
														РезультатОбработки.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ТелоОтвета;

КонецФункции

Функция ОтветПоРезультатуОбработкиСообщения(РезультатыОбработки, НесколькоЗапросов)
	
	ТелоОтвета = Новый Структура;
	Если НесколькоЗапросов Тогда
		
		ТелоОтвета = Новый Массив;
		Для Каждого РезультатЗапроса Из РезультатыОбработки Цикл
			
			ТелоОтветаНаЗапрос = ТелоОтветаПоРезультатуОбработкиЗапроса(РезультатЗапроса);
			ТелоОтвета.Добавить(ТелоОтветаНаЗапрос);
			
		КонецЦикла;
		
	ИначеЕсли РезультатыОбработки.Количество() > 0 Тогда
		
		ТелоОтвета = ТелоОтветаПоРезультатуОбработкиЗапроса(РезультатыОбработки[0]);
		
	КонецЕсли;
	
	Ответ = ОтветПоТелуОтвета(ТелоОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция РезультатОбработкиЗапросаМетодНеПоддерживается()
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиЗапроса();
	РезультатОбработки.ТипОшибки =
		Перечисления.ТипыОшибокОбменаСИнтернетМагазином.МетодНеПоддерживается;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатОбработкиЗапросаОшибкаОбработки(ТекстОшибки)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиЗапроса();
	РезультатОбработки.ТипОшибки =
		Перечисления.ТипыОшибокОбменаСИнтернетМагазином.ОшибкаОбработкиЗапроса;
	РезультатОбработки.ТекстОшибки = ТекстОшибки;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#Область КодыОшибок

Функция Ошибка_РазборСообщения()
	
	Возврат "Parse error";
	
КонецФункции

Функция Ошибка_НекорректныйЗапрос()
	
	Возврат "Invalid request";
	
КонецФункции

Функция Ошибка_ОшибкаОбработки()
	
	Возврат "Request processing error";
	
КонецФункции

Функция Ошибка_ОтсутствуетРеализация()
	
	Возврат "Not implemented";
	
КонецФункции

Функция Ошибка_НекорректныеАргументы()
	
	Возврат "Invalid arguments";
	
КонецФункции

Функция Ошибка_МетодНеПоддерживается()
	
	Возврат "Method not allowed";
	
КонецФункции

Функция КодыОшибок()
	
	Коды = Новый Соответствие;
	
	Коды.Вставить(Ошибка_ОтсутствуетРеализация(), -1);
	Коды.Вставить(Ошибка_РазборСообщения(),       1000);
	Коды.Вставить(Ошибка_НекорректныйЗапрос(),    1001);
	Коды.Вставить(Ошибка_ОшибкаОбработки(),       1002);
	Коды.Вставить(Ошибка_НекорректныеАргументы(), 1003);
	Коды.Вставить(Ошибка_МетодНеПоддерживается(), 1004);
	
	Возврат Коды;
	
КонецФункции

#КонецОбласти

#Область Валидация

#Область ВалидацияМетодов

Функция ДанныеРезультатаПроверкиЗаполнения(Отказ, ТекстОшибки)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Отказ);
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаЗаполненияМетодаОбновленияСтатусаЗаказа(ДанныеЗапроса)
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	ПроверкаНаличияПараметраТелаЗапроса("order", ДанныеЗапроса, ТекстОшибки, Отказ);
	ПроверкаНаличияПараметраТелаЗапроса("date", ДанныеЗапроса, ТекстОшибки, Отказ);
	ПроверкаНаличияПараметраТелаЗапроса("status", ДанныеЗапроса, ТекстОшибки, Отказ);
	
	Возврат ДанныеРезультатаПроверкиЗаполнения(Отказ, ТекстОшибки);
	
КонецФункции

Функция ПроверкаЗаполненияМетодаОбновленияДанныхЗаказа(ДанныеЗапроса)
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	ПроверкаНаличияПараметраТелаЗапроса("order", ДанныеЗапроса, ТекстОшибки, Отказ);
	ПроверкаНаличияПараметраТелаЗапроса("total", ДанныеЗапроса, ТекстОшибки, Отказ);
	ПроверкаНаличияПараметраТелаЗапроса("total_vat", ДанныеЗапроса, ТекстОшибки, Отказ);
	Если ДанныеЗапроса.Свойство("delivery") Тогда
		ДанныеДоставки = ДанныеЗапроса.delivery;
		ПроверкаНаличияПараметраТелаЗапроса("date", ДанныеДоставки, ТекстОшибки, Отказ);
		Если ДанныеДоставки.Свойство("date") Тогда
			ДанныеДатыДоставки = ДанныеДоставки.date;
			ПроверкаНаличияПараметраТелаЗапроса("from", ДанныеДатыДоставки, ТекстОшибки, Отказ);
			ПроверкаНаличияПараметраТелаЗапроса("to", ДанныеДатыДоставки, ТекстОшибки, Отказ);
		КонецЕсли;
	КонецЕсли;
	ПроверкаНаличияПараметраТелаЗапроса("items", ДанныеЗапроса, ТекстОшибки, Отказ);
	Если ДанныеЗапроса.Свойство("items") Тогда
		Товары = ДанныеЗапроса.items;
		Для Каждого ПозицияТовара Из Товары Цикл
			ПроверкаНаличияПараметраТелаЗапроса("product", ПозицияТовара, ТекстОшибки, Отказ);
			ПроверкаНаличияПараметраТелаЗапроса("price", ПозицияТовара, ТекстОшибки, Отказ);
			ПроверкаНаличияПараметраТелаЗапроса("price_vat", ПозицияТовара, ТекстОшибки, Отказ);
			ПроверкаНаличияПараметраТелаЗапроса("amount", ПозицияТовара, ТекстОшибки, Отказ);
			ПроверкаНаличияПараметраТелаЗапроса("total", ПозицияТовара, ТекстОшибки, Отказ);
			ПроверкаНаличияПараметраТелаЗапроса("total_vat", ПозицияТовара, ТекстОшибки, Отказ);
			ПроверкаНаличияПараметраТелаЗапроса("quantity", ПозицияТовара, ТекстОшибки, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеРезультатаПроверкиЗаполнения(Отказ, ТекстОшибки);
	
КонецФункции

Функция ПроверкаЗаполненияМетодаВыгрузкиОстатков(ДанныеЗапроса)
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	ПроверкаНаличияПараметраТелаЗапроса("product", ДанныеЗапроса, ТекстОшибки, Отказ);
	ПроверкаНаличияПараметраТелаЗапроса("warehouse", ДанныеЗапроса, ТекстОшибки, Отказ);
	ПроверкаНаличияПараметраТелаЗапроса("amount", ДанныеЗапроса, ТекстОшибки, Отказ);
	
	ПроверкаСодержимогоПараметраТелаЗапроса("product", ДанныеЗапроса, ТекстОшибки, Отказ, "GUID");
	ПроверкаСодержимогоПараметраТелаЗапроса("warehouse", ДанныеЗапроса, ТекстОшибки, Отказ, "GUID");
	ПроверкаСодержимогоПараметраТелаЗапроса("amount", ДанныеЗапроса, ТекстОшибки, Отказ, Новый ОписаниеТипов("Число"));
	
	Возврат ДанныеРезультатаПроверкиЗаполнения(Отказ, ТекстОшибки);
	
КонецФункции

Процедура ПроверкаНаличияПараметраТелаЗапроса(Наименование, ТелоЗапроса, ТекстОшибки, Отказ)
	
	Если Не ТелоЗапроса.Свойство(Наименование) Тогда
		Отказ = Истина;
		ДобавляемыйТекстОшибки = СтрШаблон(НСтр("ru='Параметр ''%1'' не найден.'"), Наименование);
		ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), ДобавляемыйТекстОшибки, СтрШаблон("%1%2%3", ТекстОшибки, Символы.ПС, ДобавляемыйТекстОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСодержимогоПараметраТелаЗапроса(Наименование, ТелоЗапроса, ТекстОшибки, Отказ, ТребуемыйТип)
	
	Если Не ТелоЗапроса.Свойство(Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметра = ТелоЗапроса[Наименование];
	ТипКорректен = Ложь;
	Если ТипЗнч(ТребуемыйТип) = Тип("Строка")
		И ТребуемыйТип = "GUID" Тогда
		ТипКорректен = СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ТребуемыйТип) = Тип("ОписаниеТипов") Тогда
		ТипКорректен = ТребуемыйТип.СодержитТип(ТипЗнч(ЗначениеПараметра));
	КонецЕсли;
	
	Если Не ТипКорректен Тогда
		Отказ = Истина;
		ДобавляемыйТекстОшибки = СтрШаблон(НСтр("ru='Неверный формат поля ''%1'', ожидается %2.'"), Наименование,
			Строка(ТребуемыйТип));
		ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), ДобавляемыйТекстОшибки, СтрШаблон("%1%2%3", ТекстОшибки, Символы.ПС,
			ДобавляемыйТекстОшибки));
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Неопределено;
	Если Наименование = "product" Тогда
		СсылкаНаОбъект = Справочники.Номенклатура.НайтиПоРеквизиту("guid", ЗначениеПараметра);
	ИначеЕсли Наименование = "warehouse" Тогда
		СсылкаНаОбъект = Справочники.Склады.НайтиПоРеквизиту("guid", ЗначениеПараметра);
	Иначе
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
		Отказ = Истина;
		ДобавляемыйТекстОшибки = СтрШаблон(НСтр("ru='Не найден объект по полю ''%1''.'"), Наименование);
		ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), ДобавляемыйТекстОшибки, СтрШаблон("%1%2%3", ТекстОшибки, Символы.ПС,
			ДобавляемыйТекстОшибки));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция СообщениеСоответствуетСтандартуJSONRPC2(ДанныеСообщения)
	
	СообщениеСоответствуетСтандарту = Истина;
	ТипТела = ТипЗнч(ДанныеСообщения);
	
	Если ТипТела <> Тип("Структура")
		И ТипТела <> Тип("Массив") Тогда
		СообщениеСоответствуетСтандарту = Ложь;
	КонецЕсли;
	
	Возврат СообщениеСоответствуетСтандарту;
	
КонецФункции

Функция ЗапросСоответствуетСтандартуJSONRPC2(ТелоЗапроса)
	
	ЗапросСоответствуетСтандарту = Истина;
	ТипТела = ТипЗнч(ТелоЗапроса);
	
	Если ТипТела <> Тип("Структура") Тогда
		ЗапросСоответствуетСтандарту = Ложь;
	ИначеЕсли Не ТелоЗапроса.Свойство("jsonrpc")
		Или ТелоЗапроса.jsonrpc <> "2.0" Тогда
		ЗапросСоответствуетСтандарту = Ложь;
	ИначеЕсли Не ТелоЗапроса.Свойство("method")
		Или Не ЗначениеЗаполнено(ТелоЗапроса.method) Тогда
		ЗапросСоответствуетСтандарту = Ложь;
	ИначеЕсли Не ТелоЗапроса.Свойство("params") Тогда
		ЗапросСоответствуетСтандарту = Ложь;
	КонецЕсли;
	
	Возврат ЗапросСоответствуетСтандарту;
	
КонецФункции

#КонецОбласти

#КонецОбласти
